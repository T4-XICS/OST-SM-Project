#version: "3.8"
services:
  kafka:
    image: bitnamilegacy/kafka:3.5.1
    container_name: kafka
    environment:
      # run broker and controller in the same process (single-node KRaft)
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      # useful logging on startup
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    networks:
      - icsnet
    volumes:
      - kafka_data:/bitnami/kafka

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminpass
      - DOCKER_INFLUXDB_INIT_ORG=ucs
      - DOCKER_INFLUXDB_INIT_BUCKET=swat_db
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
    ports:
      - "8086:8086"
    networks:
      - icsnet
    volumes:
      - influxdb_data:/var/lib/influxdb2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      # make Grafana load provisioning files
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - icsnet
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - icsnet

  producer:
    build:
      context: ../
      dockerfile: producer/Dockerfile
    container_name: producer
    depends_on:
      - kafka

      
  kafka-to-influx:
    build:
      context: ../
      dockerfile: consumer/Dockerfile
    container_name: kafka-to-influx
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      producer:
        condition: service_started
    restart: on-failure
    networks:
      - icsnet

  spark-consumer:
    build:
      context: ../model
    container_name: spark-consumer
    command: ["inference.py"]
    depends_on:
      - producer
    # request all GPUs (requires NVIDIA Container Toolkit / Docker Desktop GPU support)
    gpus: all
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    networks:
      - icsnet
    ports:
      - "4040:4040"  # Spark UI

  spark-train:
    build:
      context: ../model
    container_name: spark-train
    command: ["train.py"]
    depends_on:
      - producer
    # request all GPUs (requires NVIDIA Container Toolkit / Docker Desktop GPU support)
    gpus: all
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    networks:
      - icsnet
    ports:
      - "4041:4040"  # Spark UI
    volumes:
      - ../model/weights:/weights

networks:
  icsnet:
    driver: bridge

volumes:
  kafka_data:
  influxdb_data:
  grafana_data:
  prometheus_data:
